#!/usr/bin/env bash
set -u
set -e

ML_VERSION="1.0"
ML_GIT_REPO="https://github.com/lukasdanckwerth/bash-mailer.git"
ML_GIT_TEMPLATE_URL="https://raw.githubusercontent.com/lukasdanckwerth/bash-mailer/main/mail.html2"
ML_TEMPLATE="/etc/mailer/mail.html"
ML_CONFIG="/etc/mailer/mailer.conf"
ML_VERSION="/etc/mailer/mailer.version"
MS_SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

emph() {
  echo "\033[1m${*}\033[0m"
}

# prints the help message
print_usage() {
  echo -e "
usage: mailer [<command>] [--help]

   $(emph "--from") mail           Set the sender.
   $(emph "--to") mail             Set the receiver.
   $(emph "--subject") subject     Set the subject of the mail.
   $(emph "--headline") headline   Set the headline inside the mail.
   $(emph "--footer") footer       Set the footer inside the mail.

   $(emph "--file") filepath       Set the content of mail from file.
   $(emph "--text") text           Set the content of mail.

   $(emph "--help, -h")            Print this help text and exit
"
}

random_string() {
  echo $RANDOM | md5sum | head -c 32
}

temp_file() {
  mkdir -p "tmp/mailer/" && echo "/tmp/mailer/$(date +%s-%N).html"
}

die() {
  echo -e "${*}" && exit 0
}

get_remote_version() {
  git ls-remote "${ML_GIT_REPO}" HEAD | awk '{ print $1}'
}

print_version() {
  die "$(ML_VERSION)"
}

download_mail_template() {
  [[ -f "${ML_TEMPLATE}" ]] && die "template $(emph "${ML_TEMPLATE}") already existing"
  [[ "$(whoami)" == "root" ]] || die "$(emph "update-template") must be run as root"
  [[ "$(which curl)" == "" ]] && die "$(emph "curl") not found"
  DL_TMP_TARGET="/tmp/mailer-$(random_string)"
  curl "${ML_GIT_TEMPLATE_URL}" --out "${DL_TMP_TARGET}" --silent
  [[ -f "${DL_TMP_TARGET}" ]] || die "can't download template"
  cp -nf "${DL_TMP_TARGET}" "${ML_TEMPLATE}"
  rm -rf "${DL_TMP_TARGET}"
  [[ -f "${ML_TEMPLATE}" ]] || die "can't create template at: ${ML_TEMPLATE}"
}

update_mailer() {
  [[ "$(whoami)" == "root" ]] || die "$(emph "update") must be run as root"
  [[ "$(which git)" == "" ]] && die "$(emph "git") not found"
  [[ "$(get_remote_version)" == "$(cat "${ML_VERSION}")" ]] && die "already up to date"
  UP_TMP_TARGET="/tmp/mailer-$(random_string)"
  git clone --quiet "${ML_GIT_REPO}" "${UP_TMP_TARGET}"
  pushd "${UP_TMP_TARGET}" >/dev/null
  echo $(git rev-parse HEAD) > "${ML_VERSION}"
  make install
  popd >/dev/null
  rm -rf "${UP_TMP_TARGET}"
  cat "${ML_VERSION}"
}

update_mail_template() {
  download_mail_template
}

guard_template_existence() {
  echo "guard_template_existence"
  [[ -f "${ML_TEMPLATE}}" ]] && return
  echo "not existing"
}

MAIL_FROM=""
MAIL_TO=""
MAIL_SUBJECT=""
MAIL_HEADLINE=""
MAIL_FOOTER=""

MAIL_CONTENT=""
MAIL_CONTENT_FILE=""

[[ -f "${ML_CONFIG}" ]] && source "${ML_CONFIG}"

MS_MAIL_TEMPLATE="/etc/mailer/mail.html"
[[ -f "${MS_MAIL_TEMPLATE}" ]] || (echo "Missing file ${MS_MAIL_TEMPLATE}" && exit 0)

while (($# > 0)); do
  opt="${1}"
  shift
  case $opt in
  --to | -t)
    MAIL_TO="${1}"
    shift
    ;;
  --subject | -s)
    MAIL_SUBJECT="${1}"
    shift
    ;;
  --headline | -h)
    MAIL_HEADLINE="${1}"
    shift
    ;;
  --footer | -ft)
    MAIL_FOOTER="${1}"
    shift
    ;;
  --file)
    MAIL_CONTENT_FILE="${1}"
    shift
    ;;
  --text)
    MAIL_CONTENT="${1}"
    shift
    ;;
  --help | -h)
    print_usage
    exit 0
    ;;
  update | u)
    update_mailer
    exit 0
    ;;
  "update-templates" | ut)
    update_mail_template
    exit 0
    ;;
  version)
    echo "get_remote_version: $(get_remote_version)"
    exit 0
    ;;
  *)
    die "Unknown command: '${opt}'.  Pass '--help' for a list of commands."
    ;;
  esac
done

MS_TEMP_MAIL_HTML_FILE="/tmp/mailer-$(date +%s-%N).html"

cat ${MS_MAIL_TEMPLATE} >>"${MS_TEMP_MAIL_HTML_FILE}"

# cat "${MS_SCRIPT_DIR}/templates/startup.html" >>"${MS_TEMP_MAIL_CONTENT_HTML_FILE}"
# sed -i "s/__DATE__/$(date '+%d.%m.%Y %T')/g" "${MS_TEMP_MAIL_CONTENT_HTML_FILE}"
# sed -i "s/__HOSTNAME__/$(hostname)/g" "${MS_TEMP_MAIL_CONTENT_HTML_FILE}"
# sed -i -e "/__CONTENT__/{r $MS_TEMP_MAIL_CONTENT_HTML_FILE" -e "d}" "${MS_TEMP_MAIL_HTML_FILE}"

if [[ "${MAIL_HEADLINE}" == "" ]]; then
  MAIL_HEADLINE="${MAIL_SUBJECT}"
fi

if [[ "${MAIL_FOOTER}" == "" ]]; then
  MAIL_FOOTER="$(hostname)"
fi

echo "MAIL_CONTENT_FILE: ${MAIL_CONTENT_FILE}"

if [[ ! "${MAIL_CONTENT}" == "" ]]; then
  sed -i "s/__CONTENT__/${MAIL_CONTENT}/g" "${MS_TEMP_MAIL_HTML_FILE}"
elif [[ ! "${MAIL_CONTENT_FILE}" == "" ]]; then
  TMP_MAIL_CONTENT=$(cat "$MAIL_CONTENT_FILE")
  TMP_MAIL_CONTENT=$(echo "${TMP_MAIL_CONTENT//$'\n'/<br />}")
  TMP_FILE="/tmp/mailer-2-$(date +%s-%N).html"
  echo "${TMP_MAIL_CONTENT}" >"${TMP_FILE}"
  sed -i -e "/__CONTENT__/{r $TMP_FILE" -e "d}" "${MS_TEMP_MAIL_HTML_FILE}"
  rm -rf "${TMP_FILE}"
fi

sed -i "s/__FROM__/${MAIL_FROM}/g" "${MS_TEMP_MAIL_HTML_FILE}"
sed -i "s/__TO__/${MAIL_TO}/g" "${MS_TEMP_MAIL_HTML_FILE}"
sed -i "s/__SUBJECT__/${MAIL_SUBJECT}/g" "${MS_TEMP_MAIL_HTML_FILE}"
sed -i "s/__HEADLINE__/${MAIL_HEADLINE}/g" "${MS_TEMP_MAIL_HTML_FILE}"
sed -i "s/__FOOTER__/${MAIL_FOOTER}/g" "${MS_TEMP_MAIL_HTML_FILE}"

/usr/sbin/sendmail -t <"${MS_TEMP_MAIL_HTML_FILE}"

rm -rf "${MS_TEMP_MAIL_HTML_FILE}"
