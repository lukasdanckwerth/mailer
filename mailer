#!/usr/bin/env bash
set -u
set -e

ML_GIT_REPO="https://github.com/lukasdanckwerth/mailer.git"
ML_GIT_INSTALL_SCRIPT="https://raw.githubusercontent.com/lukasdanckwerth/mailer/main/install-mailer.sh"
ML_TEMPLATE="/etc/mailer/mail.html"
ML_CONFIG="/etc/mailer/mailer.conf"
ML_VERSION="/etc/mailer/.version"

emph() {
  echo "\033[1m${*}\033[0m"
}

random_string() {
  echo $RANDOM | md5sum | head -c 32
}

die() {
  echo -e "${*}" && exit 0
}

remote_version() {
  git ls-remote "${ML_GIT_REPO}" HEAD | awk '{ print $1}'
}

local_version() {
  if [[ -f "${ML_VERSION}" ]]; then echo "$(cat "${ML_VERSION}")"; else echo ""; fi
}

update_mailer() {
  sudo /bin/bash -c "$(curl -fsSL "${ML_GIT_INSTALL_SCRIPT}")"
}

# prints the help message
print_usage() {
  echo -e "
usage: mailer [<command>] [<arguments>]

COMMANDS:

    $(emph "file") filepath         Set the content of mail from file.
    $(emph "text") text             Set the content of mail.
    $(emph "update")                Checks for updates.

ARGUMENTS:

    $(emph "--to") mail             Set the receiver.
    $(emph "--subject") subject     Set the subject of the mail.
    $(emph "--headline") headline   Set the headline inside the mail.
    $(emph "--footer") footer       Set the footer inside the mail.

    $(emph "--help, -h")            Print this help text and exit
    $(emph "--version, -v")         Print version and exit

"
}

MAIL_FROM=""
MAIL_TO=""
MAIL_SUBJECT=""
MAIL_HEADLINE=""
MAIL_FOOTER=""

MAIL_CONTENT=""
MAIL_CONTENT_FILE=""

# exit when no arguments given
[[ $# -eq 0 ]] && die "no arguments given"

# if config file is existing source it
[[ -f "${ML_CONFIG}" ]] && source "${ML_CONFIG}"

# guard template file condition
[[ -f "${ML_TEMPLATE}" ]] || die "missing file ${ML_TEMPLATE}"

while (($# > 0)); do
  opt="${1}"
  shift
  case $opt in
  --to | -t)
    MAIL_TO="${1}"
    shift
    ;;
    --from)
      MAIL_FROM="${1}"
      shift
      ;;
  --subject | -s)
    MAIL_SUBJECT="${1}"
    shift
    ;;
  --headline | -h)
    MAIL_HEADLINE="${1}"
    shift
    ;;
  --footer | -ft)
    MAIL_FOOTER="${1}"
    shift
    ;;
  --help | -h)
    print_usage
    exit 0
    ;;
  --version | -v)
    echo "local version:   $(local_version)"
    echo "remote version:  $(remote_version)"
    exit 0
    ;;
  file)
    MAIL_CONTENT_FILE="${1}"
    shift
    ;;
  text)
    MAIL_CONTENT="${1}"
    shift
    ;;
  update | u)
    update_mailer
    exit 0
    ;;
  *)
    die "Unknown command: '${opt}'.  Pass '--help' for a list of commands."
    ;;
  esac
done

# guard receiver existence
[[ "${MAIL_TO}" == "" ]] && die "no receiver given"

# temporary working file
ML_WORKING_HTML_FILE="/tmp/mailer-$(random_string).html"
cat ${ML_TEMPLATE} >>"${ML_WORKING_HTML_FILE}"

if [[ "${MAIL_SUBJECT}" == "" ]]; then
  MAIL_SUBJECT="Mailer"
fi

if [[ "${MAIL_HEADLINE}" == "" ]]; then
  MAIL_HEADLINE="${MAIL_SUBJECT}"
fi

if [[ "${MAIL_FOOTER}" == "" ]]; then
  MAIL_FOOTER="$(hostname)"
fi

if [[ ! "${MAIL_CONTENT}" == "" ]]; then
  sed -i "s/__CONTENT__/${MAIL_CONTENT}/g" "${ML_WORKING_HTML_FILE}"
elif [[ ! "${MAIL_CONTENT_FILE}" == "" ]]; then

  TMP_MAIL_CONTENT=$(cat "$MAIL_CONTENT_FILE")
  TMP_MAIL_CONTENT=$(echo "${TMP_MAIL_CONTENT//$'\n'/<br />}")
  TMP_FILE="/tmp/mailer-2-$(date +%s-%N).html"
  echo "${TMP_MAIL_CONTENT}" >"${TMP_FILE}"
  sed -i -e "/__CONTENT__/{r $TMP_FILE" -e "d}" "${ML_WORKING_HTML_FILE}"
  rm -rf "${TMP_FILE}"

fi

sed -i "s/__FROM__/${MAIL_FROM}/g" "${ML_WORKING_HTML_FILE}"
sed -i "s/__TO__/${MAIL_TO}/g" "${ML_WORKING_HTML_FILE}"
sed -i "s/__SUBJECT__/${MAIL_SUBJECT}/g" "${ML_WORKING_HTML_FILE}"
sed -i "s/__HEADLINE__/${MAIL_HEADLINE}/g" "${ML_WORKING_HTML_FILE}"
sed -i "s/__FOOTER__/${MAIL_FOOTER}/g" "${ML_WORKING_HTML_FILE}"

/usr/sbin/sendmail -t <"${ML_WORKING_HTML_FILE}"

rm -rf "${ML_WORKING_HTML_FILE}"
